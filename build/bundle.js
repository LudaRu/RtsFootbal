(function () {
  'use strict';

  const CFG = {
    idSelector: 'cnvGame',
    // Размер канваса
    width: 1000,
    height: 700,
    // Размер ячеек
    cellWidth: 100,
    cellHeight: 100,
    MAX_COL: 10,
    MAX_ROW: 7,
  };

  class Unit {
    constructor(name, cell) {
      this.name = name;
      /** @type Cell */
      this.setPositionByCell(cell);
      this.img =new Image();
      this.img.src = 'https://banner2.kisspng.com/20180713/xkr/kisspng-team-sport-football-player-lucas-hernandez-5b49736c91ec10.8388072915315403325977.jpg';
    }

    setPositionByCell(cell) {
      this.x = cell.top + CFG.cellWidth / 4;
      this.y = cell.left + CFG.cellWidth / 4;
      this.w = CFG.cellWidth / 2;
      this.h = CFG.cellHeight / 2;
      this.context = cell.context;
    }

    render() {
      this._renderImg();
    }

    _renderImg() {
      if(!this.img.onload){
        this.img.onload = () => {
          this.context.drawImage(this.img, this.x, this.y, this.w, this.h);
        };
      }

      this.context.drawImage(this.img, this.x, this.y, this.w, this.h);
    }
  }

  class Cell {
    constructor(colI, rowI, solid, context) {
      // Индексы в массиве объектов
      this.id = rowI + '' + colI;
      this.rowIndex = rowI;
      this.colIndex = colI;
      this.context = context;

      this.top = colI * CFG.cellWidth; // Позиция x
      this.left = rowI * CFG.cellHeight; // Позиция y
      this.solid = solid; // Выделение ячейки

      // fixme
      this.data = {};
      this.state = {};
      this.state.change = false;
    }

    toggle() {
      this.solid = !this.solid;
      this.render();
    }

    change() {
      this.render(true);
    }

    render(solid = null) {
      this.context.fillStyle = solid ? '#63e269' : '#4CAF50';
      this.context.fillRect(this.top, this.left, CFG.cellWidth, CFG.cellHeight);
      this._drawBorder();
      this.renderData();
    }

    renderData() {
      if(this.data.unit){
        this.data.unit.render();
      }
    }

    _drawBorder() {
      this.context.beginPath();
      this.context.strokeStyle = this.solid ? '#41b241' : '#44a147';
      this.context.moveTo(this.top - 0.5, this.left - 0.5);
      this.context.lineTo(this.top - 0.5, this.left + 100 - 0.5);
      this.context.lineTo(this.top + 100 - 0.5, this.left + 100 - 0.5);
      this.context.lineTo(this.top + 100 - 0.5, this.left - 0.5);
      this.context.lineTo(this.top - 0.5, this.left - 0.5);
      this.context.stroke();
    }

    createAddUnit(name) {
      this.data.unit = new Unit(name, this);
      this.renderData();
    }

    set unit(unit) {
      this.data.unit = unit;
    }

    get unit() {
      return this.data.unit;
    }

    static movementElementToCell(fromCell, toCell, nameElement) {
      if(fromCell.id !== toCell.id){
        toCell.data[nameElement] = fromCell.data[nameElement];
        toCell.data[nameElement].setPositionByCell(toCell);
        delete fromCell.data[nameElement];

        fromCell.render();
        toCell.render();
      }
    }
  }

  class Map {
    constructor() {
      this.canvas = Map._drawHtml();
      this.context = this.canvas.getContext('2d');
      this.cellList = this._generateCells();
    }

    static _drawHtml() {
      const canvas = document.createElement('canvas');
      canvas.id = CFG.idSelector;
      canvas.width = CFG.width;
      canvas.height = CFG.height;
      document.body.appendChild(canvas);

      return canvas;
    }

    render() {
      // Рендер всех ячеек
      this.cellList.forEach((items) => {
        items.forEach((cell) => {
          cell.render();
        });
      });
    }

    // Создание 2-х мерной карты с ячейками
    _generateCells() {
      const cellList = [];
      for (let row = 0; row < CFG.MAX_ROW; row++) {
        cellList[row] = [];
        for (let col = 0; col < CFG.MAX_COL; col++) {
          cellList[row][col] = new Cell(col, row, false, this.context);
        }
      }

      return cellList;
    }

    /* Найти объекта канваса по X Y курсора*/
    getCanvasCellByPosition(row, col) {
      return this.cellList[row][col];
    }

  }

  var bresenhame = (x1, y1, x2, y2) => {
    const deltaX = Math.abs(x2 - x1),
      deltaY = Math.abs(y2 - y1),
      signX = x1 < x2 ? 1 : -1,
      signY = y1 < y2 ? 1 : -1,
      points = [];

    let error = deltaX - deltaY;

    while (x1 !== x2 || y1 !== y2) {
      points.push({x: x1, y: y1});
      const error2 = error * 2;
      if (error2 > -deltaY) {
        error -= deltaY;
        x1 += signX;
      }
      if (error2 < deltaX) {
        error += deltaX;
        y1 += signY;
      }
    }
    points.push({x: x2, y: y2});

    return points;
  };

  var gameModule = (params) => {
    const mapGame = new Map();
    mapGame.render();

    /** @type Cell */
    let selectCell;
    let mouseCellId;

    mapGame.canvas.addEventListener('mousedown', (event) => {
      /** @type Cell */
      const cell = getCellByMouseEvent(event);

      if (selectCell) { // есть выбранная ячейка
        Cell.movementElementToCell(selectCell, cell, 'unit');
        selectCell = null;
        mapGame.render();
        cell.change();
      } else { // выбрана ячейка
        if (typeof cell.data.unit !== 'undefined') {
          cell.change();
          selectCell = cell;
        }
      }
    });

    mapGame.canvas.addEventListener('mousemove', (event) => {
      /** @type Cell */
      const cell = getCellByMouseEvent(event);

      if (selectCell) {
        if (mouseCellId !== cell.id) {
          mouseCellId = cell.id;
          const cellPoints = bresenhame(selectCell.colIndex, selectCell.rowIndex, cell.colIndex, cell.rowIndex);
          mapGame.render();
          cellPoints.forEach((point) => {
            const cellTemp = mapGame.cellList[point.y][point.x];
            cellTemp.change();
          });
        }
      }

      if(!selectCell) {
        if (mouseCellId !== cell.id) {
          mapGame.render();
          mouseCellId = cell.id;

          cell.change();
        }
      }

    });

    // EventEmitter.subscribe('selectCell', (data) => {
    //   selectCell = data;
    // });

    // Добавим юнита на поле
    /** @type Cell */
    const cell = mapGame.cellList[2][2];
    cell.createAddUnit('Ivan');

    function getCellByMouseEvent(event) {
      const x = event.offsetX === undefined ? event.layerX : event.offsetX;
      const y = event.offsetY === undefined ? event.layerY : event.offsetY;

      const col = Math.floor(x / CFG.cellWidth);
      const row = Math.floor(y / CFG.cellHeight);
      return mapGame.getCanvasCellByPosition(row, col);
    }

  };

  gameModule();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
